<h1 id="calendarTitle" class="text-center my-4">Loading Calendar...</h1>

<div id="calendarContainer" class="mx-auto" style="width:80%;">
  <style>
    /* General Styling */
    html, body {
      min-height: 112%;
      margin: 0;
      padding: 0;
      font-family: 'Roboto', Arial, sans-serif;
      background: linear-gradient(to bottom, #FFF, #e8d4ff); /* Light purple gradient */
      display: flex;
      flex-direction: column;
    }
    

    h1 {
      color: #6c5ce7; /* Purple heading color */
      font-weight: bold;
    }

    table#calendarTable {
      width: 100%;
      border-collapse: collapse;
      table-layout: fixed;
      font-family: Arial, sans-serif;
      font-size: 1.1rem;
    }
    table#calendarTable th,
    table#calendarTable td {
      border: 1px solid #ccc;
      vertical-align: top;
      padding: 4px;
      width: 14.2857%;
      height: 120px;
      overflow: hidden;
    }
    table#calendarTable th {
      background: #f0e2ff;
    }
    .eventBlock {
      display: block;
      margin-top: 4px;
      padding: 2px 4px;
      border-radius: 4px;
      font-size: 0.9rem;
      color: #fff;
      cursor: pointer;
      background: #6c5ce7; /* Purple background */
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }
    .controls {
      text-align: center;
      margin-bottom: 1rem;
    }
    .controls button,
    .controls a {
      margin: 0 .3rem;
    }

    /* Button Styling */
    .btn-primary {
      border: 2px solid #6c5ce7; /* Purple outline */
      background-color: transparent;
      color: #6c5ce7;
      transition: background-color 0.3s, color 0.3s;
    }
    .btn-primary:hover {
      background-color: #6c5ce7;
      color: #fff;
    }
    .btn-secondary {
      border: 2px solid #6c757d; /* Gray outline */
      background-color: transparent;
      color: #6c757d;
      transition: background-color 0.3s, color 0.3s;
    }
    .btn-secondary:hover {
      background-color: #6c757d;
      color: #fff;
    }
    .btn-success {
      border: 2px solid #28a745; /* Green outline */
      background-color: transparent;
      color: #28a745;
      transition: background-color 0.3s, color 0.3s;
    }
    .btn-success:hover {
      background-color: #28a745;
      color: #fff;
    }

    /* Modal Header Styling */
    .modal-header {
      background-color: #6c5ce7; /* Purple background */
      color: #fff; /* White text */
    }
    .modal-title {
      font-weight: bold;
    }
  </style>

  <div class="controls">
    <button id="prevMonth" class="btn btn-secondary btn-sm">Prev</button>
    <button id="nextMonth" class="btn btn-secondary btn-sm">Next</button>
    <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#event_modal">
      Create Event
    </button>
    <a href="/calendar/ics" class="btn btn-success btn-sm">Download ICS</a>
    <button id="viewMonth" class="btn btn-secondary btn-sm">Month</button>
    <button id="viewWeek" class="btn btn-secondary btn-sm">Week</button>
    <button id="viewDay" class="btn btn-secondary btn-sm">Day</button>
  </div>


  <table id="calendarTable"></table>

  {{!-- Create Event Modal --}}
  <div class="modal fade" id="event_modal" tabindex="-1">
    <div class="modal-dialog"><div class="modal-content">
      <form id="create_event" method="post" action="/calendar">
        <div class="modal-header">
          <h5 class="modal-title">Create a new Event!</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Event Name</p><input name="event_name" class="form-control" required>
          <p>Category</p><input name="event_category" class="form-control">
          <p>Date</p><input type="date" name="event_date" class="form-control" required>
          <p>Time</p><input type="time" name="event_time" class="form-control" required>
          <p>Reminder (mins before)</p><input type="number" name="event_reminder_delay" class="form-control" min="0" required>
          <p>Description</p><textarea name="event_description" class="form-control"></textarea>
          <p>Link to Event</p><input name="event_link" class="form-control">
          <p>Attendees (emails)</p><input name="event_attendees" id="event_attendees" class="form-control">
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button class="btn btn-primary" type="submit">Create Event</button>
        </div>
      </form>
    </div></div>
  </div>

  {{!-- Edit Event Modal --}}
  <div class="modal fade" id="edit_modal" tabindex="-1">
    <div class="modal-dialog"><div class="modal-content">

      <!-- EDIT FORM -->
      <form id = "edit_event" method="post" action="/calendar/edit">
        <input type="hidden" name="event_id" id="edit_event_id">
        <div class="modal-header">
          <h5 class="modal-title">Edit Event</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Event Name</p><input name="event_name" id="edit_name" class="form-control">
          <p>Category</p><input name="event_category" id="edit_category" class="form-control">
          <p>Date</p><input type="date" name="event_date" id="edit_date" class="form-control">
          <p>Time</p><input type="time" name="event_time" id="edit_time" class="form-control">
          <p>Reminder (mins before)</p><input type="number" name="event_reminder_delay" id="edit_reminder" class="form-control">
          <p>Description</p><textarea name="event_description" id="edit_description" class="form-control"></textarea>
          <p>Link to Event</p><input name="event_link" id="edit_link" class="form-control">
          <p>Attendees (emails)</p>
          <input name="new_event_attendees" id="new_event_attendees" class="form-control">        </div>
        <div class="modal-footer d-flex w-100">
          <button class="btn btn-primary me-auto" type="submit">Save Changes</button>
          <button class="btn btn-secondary mx-2" data-bs-dismiss="modal">Close</button>
        </div>
      </form>

      <!-- DELETE FORM -->
      <div class="px-3 pb-3 text-end">
        <form method="post" action="/calendar/delete">
          <input type="hidden" name="event_id" id="delete_event_id">
          <button class="btn btn-danger">Delete</button>
        </form>
      </div>

    </div></div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  const eventsByDate = {};
  {{{json events}}}.forEach(ev => {
    const dt = new Date(ev.eventdate);
    const key = `${dt.getFullYear()}-${String(dt.getMonth()+1).padStart(2,'0')}-${String(dt.getDate()).padStart(2,'0')}`;
    (eventsByDate[key] ||= []).push({ ...ev, time: dt.toTimeString().slice(0,5) });
  });

  let year = new Date().getFullYear(),
      month = new Date().getMonth();
      day = new Date().getDate(),
      viewType = 'month';

  function renderCurrentView() {
  if (viewType === 'month') {
    renderMonthView(year, month);
  } else if (viewType === 'week') {
    renderWeekView(year, month, day);
  } else if (viewType === 'day') {
    renderDayView(year, month, day);
  }
}
function renderMonthView(y, m) {
  const table = document.getElementById('calendarTable');
  table.innerHTML = '';

  // Create header row with day names
  const header = document.createElement('tr');
  ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'].forEach(day => {
    const th = document.createElement('th');
    th.textContent = day;
    header.appendChild(th);
  });
  table.appendChild(header);

  // Determine the first day and total days in the month
  const firstDay = new Date(y, m, 1).getDay();
  const daysInMonth = new Date(y, m+1, 0).getDate();
  let row = document.createElement('tr');

  // Insert blank cells for days before the 1st
  for (let i = 0; i < firstDay; i++) {
    row.appendChild(document.createElement('td'));
  }

  // Loop through each day of the month
  for (let d = 1; d <= daysInMonth; d++) {
    if ((firstDay + d - 1) % 7 === 0 && d > 1) {
      table.appendChild(row);
      row = document.createElement('tr');
    }

    const td = document.createElement('td');
    td.style.padding = '4px';
    td.style.height = '120px';

    // Add the day number
    const num = document.createElement('div');
    num.style.fontWeight = 'bold';
    num.textContent = d;
    td.appendChild(num);

    // Build the key from the current year, month, day
    const key = `${y}-${String(m+1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
    (eventsByDate[key] || []).forEach(ev => {
      const eb = document.createElement('div');
      eb.className = 'eventBlock';
      eb.textContent = `${ev.time} â€“ ${ev.eventname}`;
      eb.onclick = () => {
        // Populate the edit modal
        document.getElementById('edit_event_id').value   = ev.eventid;
        document.getElementById('delete_event_id').value = ev.eventid;
        document.getElementById('edit_name').value       = ev.eventname;
        document.getElementById('edit_category').value   = ev.eventcategory;
        document.getElementById('edit_date').value       = key;
        document.getElementById('edit_time').value       = ev.time;
        document.getElementById('edit_reminder').value   = ev.eventreminderdelay || '';
        document.getElementById('edit_description').value= ev.eventdescription;
        document.getElementById('edit_link').value       = ev.eventlink;
        document.getElementById('edit_attendees').value  = ev.eventemaillist;
        new bootstrap.Modal(document.getElementById('edit_modal')).show();
      };
      td.appendChild(eb);
    });
    row.appendChild(td);
  }

  // Fill any remaining cells to complete the row
  while (row.children.length < 7) {
    row.appendChild(document.createElement('td'));
  }
  table.appendChild(row);

  // Update the calendar title
  const monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];
  document.getElementById('calendarTitle').textContent = `${monthNames[m]} ${y}`;
}
function renderWeekView(y, m, d) {
  // Clear table contents
  const table = document.getElementById('calendarTable');
  table.innerHTML = '';

  // Create header row (days of week)
  const header = document.createElement('tr');
  const dateObj = new Date(y, m, d);
  const startOfWeek = new Date(dateObj);
  startOfWeek.setDate(dateObj.getDate() - dateObj.getDay());
  for (let i = 0; i < 7; i++) {
    const th = document.createElement('th');
    const dayDate = new Date(startOfWeek);
    dayDate.setDate(startOfWeek.getDate() + i);
    th.textContent = dayDate.toLocaleDateString(undefined, { weekday: 'short', month: 'numeric', day: 'numeric' });
    header.appendChild(th);
  }
  table.appendChild(header);

  // Create one row for the week events
  const row = document.createElement('tr');
  for (let i = 0; i < 7; i++) {
    const td = document.createElement('td');
    td.style.padding = '4px';
    td.style.height = '120px';
    const dayDate = new Date(startOfWeek);
    dayDate.setDate(startOfWeek.getDate() + i);
    const key = `${dayDate.getFullYear()}-${String(dayDate.getMonth()+1).padStart(2,'0')}-${String(dayDate.getDate()).padStart(2,'0')}`;
    // Add day number (optional)
    const num = document.createElement('div');
    num.style.fontWeight = 'bold';
    num.textContent = dayDate.getDate();
    td.appendChild(num);
    // Append any events in the day
    (eventsByDate[key] || []).forEach(ev => {
      const eb = document.createElement('div');
      eb.className = 'eventBlock';
      eb.textContent = `${ev.time} â€“ ${ev.eventname}`;
      // Attach the same onclick event if desired
      eb.onclick = () => { /* open edit modal similar to month view */ };
      td.appendChild(eb);
    });
    row.appendChild(td);
  }
  table.appendChild(row);
  document.getElementById('calendarTitle').textContent =
    `Week of ${startOfWeek.toLocaleDateString()}`;
}

function renderDayView(y, m, d) {
  const table = document.getElementById('calendarTable');
  table.innerHTML = '';

  const header = document.createElement('tr');
  const th = document.createElement('th');
  th.textContent = new Date(y, m, d).toLocaleDateString(undefined, {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    year: 'numeric'
  });
  header.appendChild(th);
  table.appendChild(header);

  // List events for the day
  const row = document.createElement('tr');
  const td = document.createElement('td');
  td.style.padding = '8px';
  const key = `${y}-${String(m+1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
  (eventsByDate[key] || []).forEach(ev => {
    const eb = document.createElement('div');
    eb.className = 'eventBlock';
    eb.textContent = `${ev.time} â€“ ${ev.eventname}`;
    eb.onclick = () => { /* open edit modal similar to month view */ };
    td.appendChild(eb);
  });
  row.appendChild(td);
  table.appendChild(row);
  document.getElementById('calendarTitle').textContent =
    `Day: ${new Date(y, m, d).toLocaleDateString()}`;
}
  document.getElementById('prevMonth').onclick = () => {
  if (viewType === 'month') {
    if (--month < 0) { month = 11; year--; }
  } else {
    const dt = new Date(year, month, day);
    dt.setDate(dt.getDate() - 1);
    year = dt.getFullYear(); month = dt.getMonth(); day = dt.getDate();
  }
  renderCurrentView();
};

document.getElementById('nextMonth').onclick = () => {
  if (viewType === 'month') {
    if (++month > 11) { month = 0; year++; }
  } else {
    const dt = new Date(year, month, day);
    dt.setDate(dt.getDate() + 1);
    year = dt.getFullYear(); month = dt.getMonth(); day = dt.getDate();
  }
  renderCurrentView();
};
document.getElementById('viewMonth').onclick = () => {
  viewType = 'month';
  day = 1; // optionally reset day for month view
  renderCurrentView();
};

document.getElementById('viewWeek').onclick = () => {
  viewType = 'week';
  renderCurrentView();
};

document.getElementById('viewDay').onclick = () => {
  viewType = 'day';
  renderCurrentView();
};

document.addEventListener('DOMContentLoaded', () => {
    renderCurrentView();
  });

document.addEventListener('submit', async (event) => {
  let formID = event.target.id;
  let email_list = '';
  if (formID === 'create_event') {
    email_list = document.getElementById('event_attendees').value;
  } else if (formID === 'edit_event') {
    email_list = document.getElementById('new_event_attendees').value;
  } else {
    return;
  }

  const emails = email_list
    .split(',')
    .map(e => e.trim())
    .filter(e => e.length > 0);

  const regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;


  for (let email of emails) {
    if (!regex.test(email)) {
      alert("One or more of the emails you have entered are invalid!");
      event.preventDefault();
      return;
    }
  }

  let event_id = document.getElementById('event_id').value;

  let old_emails = await db.any(
    `SELECT attendeeemail
     FROM events_to_attendees
     WHERE eventid = $1`,
    [event_id]
  );

  console.log("old emails:", old_emails);
  console.log("new emails: ", emails);

  for (const old_email of old_emails) {
    if (!emails.includes(old_email.attendeeemail)) {
      await db.none(
        `DELETE FROM events_to_attendees
         WHERE eventid = $1 AND attendeeemail = $2`,
        [event_id, old_email.attenrenderCalendardeeemail]
      );
    }
  }

  for (const email of emails){
    if(!old_emails.some(old_email => old_email.attendeeemail == email)){
      await db.none(
        `INSERT INTO events_to_attendees (eventid, attendeeemail)
        VALUES ($1, $2)`,
        [event_id, email]
      );
    }
  }

  await db.none(
    `UPDATE events
     SET eventemaillist = $1
     WHERE eventid = $2`,
    [emails.join(','), event_id]
  );


});



</script>