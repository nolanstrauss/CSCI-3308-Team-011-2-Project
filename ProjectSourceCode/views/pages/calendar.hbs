<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Big Calendar</title>
    <style>
      /* Calendar styles */
      #calendarContainer {
        width: 80%;
        margin: 0 auto;
        margin-top: 2rem;
      }
      #calendarTitle {
        text-align: center;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        font-family: Arial, sans-serif;
        font-size: 1.1rem;
      }
      th, td {
        border: 1px solid #ccc;
        text-align: center;
        height: 3rem;
        vertical-align: top;
      }
      th {
        background: #f2f2f2;
      }
      .empty {
        background: #fafafa;
      }
      .event-btn {
        background-color: lightblue;
        border: none;
        padding: 2px 5px;
        margin-top: 5px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <h1 id="calendarTitle"></h1>
    <div id="calendarContainer">
      <table id="calendarTable">
        <!-- Calendar will be built dynamically with JS -->
      </table>
      <div class="row" style="margin-top:1rem;">
        <div class="col-2">
          <div class="custom-container">
            <button
              class="btn btn-primary mt-3"
              data-bs-toggle="modal"
              data-bs-target="#event_modal"
            >
              Create Event
            </button>
          </div>
        </div>
        <div class="col-2">
          <div class="custom-container">
            <button
              class="btn btn-secondary mt-3"
              data-bs-toggle="modal"
              data-bs-target="#manage_events_modal"
            >
              Manage Events
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Event Modal -->
    <div class="modal" tabindex="-1" id="event_modal">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Create a new Event!</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="createEventForm">
              <p>Event Name</p>
              <input type="text" name="event_name" pattern=".{1,}" required />
              <p>Category</p>
              <input type="text" name="event_category" />
              <p>Date</p>
              <input type="date" name="event_date" max="9999-12-31" required>
              <p>Time</p>
              <input type="time" name="event_time" required>
              <p>Reminder (in mins)</p>
              <input type="number" name="event_reminder_delay" min="0" required>
              <p>Description</p>
              <textarea rows="5" cols="60" name="event_description"></textarea>
              <p>Link to Event</p>
              <input type="text" name="event_link">
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button class="btn btn-primary" type="submit">Create Event</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Manage Events Modal -->
    <div class="modal" tabindex="-1" id="manage_events_modal">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Manage Events</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <table class="table" id="manageEventsTable">
              <thead>
                <tr>
                  <th>Event Name</th>
                  <th>Category</th>
                  <th>Date</th>
                  <th>Time</th>
                  <th>Description</th>
                  <th>Link</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <!-- Rows will be populated dynamically -->
              </tbody>
            </table>
          </div>
          <div class="modal-footer">
            <button type="button" id="saveEventsButton" class="btn btn-primary">Save changes</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" 
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" 
      crossorigin="anonymous">
    </script>
    <script>
      let eventsData = [];

      function generateCalendar(year, month) {
        const monthNames = [
          "January", "February", "March", "April", "May", "June",
          "July", "August", "September", "October", "November", "December"
        ];
        const firstDay = new Date(year, month, 1);
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const calendarTitle = document.getElementById("calendarTitle");
        calendarTitle.textContent = `${monthNames[month]} ${year}`;
        const calendarTable = document.getElementById("calendarTable");
        calendarTable.innerHTML = "";

        const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        let headerRow = document.createElement("tr");
        dayNames.forEach(day => {
          const th = document.createElement("th");
          th.textContent = day;
          headerRow.appendChild(th);
        });
        calendarTable.appendChild(headerRow);

        let startDay = firstDay.getDay();
        let currentRow = document.createElement("tr");
        for (let i = 0; i < startDay; i++) {
          const emptyCell = document.createElement("td");
          emptyCell.className = "empty";
          currentRow.appendChild(emptyCell);
        }

        for (let date = 1; date <= daysInMonth; date++) {
          if ((startDay + date - 1) % 7 === 0 && date > 1) {
            calendarTable.appendChild(currentRow);
            currentRow = document.createElement("tr");
          }
          const cell = document.createElement("td");
          cell.setAttribute("data-date", date);
          cell.innerHTML = date;
          currentRow.appendChild(cell);
        }
        let remainingCells = 7 - currentRow.children.length;
        for (let i = 0; i < remainingCells; i++) {
          const emptyCell = document.createElement("td");
          emptyCell.className = "empty";
          currentRow.appendChild(emptyCell);
        }
        calendarTable.appendChild(currentRow);

        eventsData.forEach(event => {
          let eventDateObj = new Date(event.eventDate);
          if (eventDateObj.getFullYear() === year && eventDateObj.getMonth() === month) {
            const day = eventDateObj.getDate();
            let cell = document.querySelector(`td[data-date='${day}']`);
            if (cell) {
              const btn = document.createElement("button");
              btn.textContent = event.eventName;
              btn.className = "event-btn";
              cell.appendChild(document.createElement("br"));
              cell.appendChild(btn);
            }
          }
        });
      }

      document.addEventListener("DOMContentLoaded", () => {
        const today = new Date();
        generateCalendar(today.getFullYear(), today.getMonth());

        const createEventForm = document.getElementById("createEventForm");
        createEventForm.addEventListener("submit", function(e) {
          e.preventDefault();
          const formData = new FormData(createEventForm);
          const newEvent = {
            id: Date.now(),
            eventName: formData.get("event_name"),
            eventCategory: formData.get("event_category"),
            eventDate: formData.get("event_date"),
            eventTime: formData.get("event_time"),
            eventReminderDelay: formData.get("event_reminder_delay"),
            eventDescription: formData.get("event_description"),
            eventLink: formData.get("event_link")
          };
          eventsData.push(newEvent);
          const current = new Date(newEvent.eventDate);
          generateCalendar(current.getFullYear(), current.getMonth());
          createEventForm.reset();
          const eventModalEl = document.getElementById("event_modal");
          const modal = bootstrap.Modal.getInstance(eventModalEl);
          modal.hide();
        });
      });

      function populateManageEventsTable() {
        const tableBody = document.querySelector("#manageEventsTable tbody");
        tableBody.innerHTML = "";
        eventsData.forEach(event => {
          const row = document.createElement("tr");

          const nameCell = document.createElement("td");
          const nameInput = document.createElement("input");
          nameInput.type = "text";
          nameInput.value = event.eventName;
          nameInput.dataset.eventId = event.id;
          nameInput.className = "form-control";
          nameCell.appendChild(nameInput);
          row.appendChild(nameCell);

          const categoryCell = document.createElement("td");
          const categoryInput = document.createElement("input");
          categoryInput.type = "text";
          categoryInput.value = event.eventCategory;
          categoryInput.className = "form-control";
          categoryCell.appendChild(categoryInput);
          row.appendChild(categoryCell);

          const dateCell = document.createElement("td");
          const dateInput = document.createElement("input");
          dateInput.type = "date";
          dateInput.value = event.eventDate;
          dateInput.className = "form-control";
          dateCell.appendChild(dateInput);
          row.appendChild(dateCell);

          const timeCell = document.createElement("td");
          const timeInput = document.createElement("input");
          timeInput.type = "time";
          timeInput.value = event.eventTime;
          timeInput.className = "form-control";
          timeCell.appendChild(timeInput);
          row.appendChild(timeCell);

          const descCell = document.createElement("td");
          const descInput = document.createElement("input");
          descInput.type = "text";
          descInput.value = event.eventDescription;
          descInput.className = "form-control";
          descCell.appendChild(descInput);
          row.appendChild(descCell);

          const linkCell = document.createElement("td");
          const linkInput = document.createElement("input");
          linkInput.type = "text";
          linkInput.value = event.eventLink;
          linkInput.className = "form-control";
          linkCell.appendChild(linkInput);
          row.appendChild(linkCell);

          const actionCell = document.createElement("td");
          const deleteBtn = document.createElement("button");
          deleteBtn.textContent = "Delete";
          deleteBtn.className = "btn btn-danger btn-sm";
          deleteBtn.onclick = function() {
            const index = eventsData.findIndex(e => e.id === event.id);
            if (index > -1) {
              eventsData.splice(index, 1);
              populateManageEventsTable();
              const today = new Date();
              generateCalendar(today.getFullYear(), today.getMonth());
            }
          };
          actionCell.appendChild(deleteBtn);
          row.appendChild(actionCell);
          tableBody.appendChild(row);
        });
      }

  document.getElementById("saveEventsButton").addEventListener("click", function() {
    const tableBody = document.querySelector("#manageEventsTable tbody");
    const rows = tableBody.getElementsByTagName("tr");
    // Loop through all rows in the table body
    for (let row of rows) {
      const inputs = row.querySelectorAll("input");
      if (inputs.length >= 6) {
        // Obtain the event id stored in the first input's dataset
        const eventId = inputs[0].dataset.eventId;
        // Find the matching event in eventsData
        const event = eventsData.find(e => e.id == eventId);
        if (event) {
          event.eventName = inputs[0].value;
          event.eventCategory = inputs[1].value;
          event.eventDate = inputs[2].value;
          event.eventTime = inputs[3].value;
          event.eventDescription = inputs[4].value;
          event.eventLink = inputs[5].value;
        }
      }
    }
    console.log("Updated events:", eventsData);
    // Hide modal and regenerate calendar
    const manageEventsModalEl = document.getElementById("manage_events_modal");
    const modalInstance = bootstrap.Modal.getInstance(manageEventsModalEl);
    modalInstance.hide();
    const today = new Date();
    generateCalendar(today.getFullYear(), today.getMonth());
  });

  const manageEventsModal = document.getElementById("manage_events_modal");
  manageEventsModal.addEventListener("show.bs.modal", populateManageEventsTable);
    </script>
  </body>
</html>